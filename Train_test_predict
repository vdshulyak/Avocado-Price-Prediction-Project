{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "4b775583-2397-4484-8bcf-62acf94736bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from pathlib import Path\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score , roc_curve , r2_score, mean_absolute_error, mean_squared_error\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn import preprocessing\n",
    "from sklearn.model_selection import train_test_split , GridSearchCV\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import AdaBoostClassifier,AdaBoostRegressor\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import sklearn.model_selection \n",
    "from sklearn.model_selection import cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "cd6f8ebc-b165-44e1-8ec2-f95fd658d53e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_dataset(df):\n",
    "    assert isinstance(df, pd.DataFrame), \"df needs to be a pd.DataFrame\"\n",
    "    df.dropna(inplace=True)\n",
    "    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)\n",
    "    return df[indices_to_keep].astype(np.float64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "6e12669c-22bd-4f5c-9f56-5da1e63ff2a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\n",
    "    Path(\"..//Group_6_Project_2/Combined Dataset.csv\"),\n",
    "    index_col=\"Date\",\n",
    "    infer_datetime_format=True,\n",
    "    parse_dates=True\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "695ffd25-6a01-49dc-911c-f8969cfbadbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "le = preprocessing.LabelEncoder()\n",
    "le.fit(df['type'])\n",
    "LabelEncoder()\n",
    "df['type'] = le.transform(df['type'])\n",
    "le.fit(df['region'])\n",
    "df['region'] = le.transform(df['region'])\n",
    "df = clean_dataset(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "db5b8fb2-ece6-4806-b6f4-e4d263798f56",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df.copy()\n",
    "list_drop = [\"AveragePrice\",\"Total Bags\",\"4046\",\"4225\",\"4770\"]\n",
    "x.drop(list_drop, axis=1, inplace=True)\n",
    "y = df.copy()\n",
    "y = df[\"AveragePrice\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "8ae414bc-98a9-47d6-b948-7be7e1773ce4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 score corespond to random state 40 is 0.6656905936305988\n",
      "R2 score corespond to random state 40 is 0.5013967753970066\n",
      "R2 score corespond to random state 40 is 0.4664623425494596\n",
      "R2 score corespond to random state 41 is 0.6320383160518377\n",
      "R2 score corespond to random state 41 is 0.4973703481275603\n",
      "R2 score corespond to random state 41 is 0.4582971136877402\n",
      "R2 score corespond to random state 42 is 0.6787597624008705\n",
      "R2 score corespond to random state 42 is 0.5039091695015594\n",
      "R2 score corespond to random state 42 is 0.4446747690661975\n",
      "R2 score corespond to random state 43 is 0.6250817229532134\n",
      "R2 score corespond to random state 43 is 0.51621291065966\n",
      "R2 score corespond to random state 43 is 0.47644898389071433\n",
      "R2 score corespond to random state 44 is 0.6708554348495558\n",
      "R2 score corespond to random state 44 is 0.5165035161388978\n",
      "R2 score corespond to random state 44 is 0.46369171849880175\n",
      "R2 score corespond to random state 45 is 0.6753341340313233\n",
      "R2 score corespond to random state 45 is 0.5209004601235427\n",
      "R2 score corespond to random state 45 is 0.47286263784955884\n",
      "R2 score corespond to random state 46 is 0.6501384606910818\n",
      "R2 score corespond to random state 46 is 0.5053022954128338\n",
      "R2 score corespond to random state 46 is 0.4698025832268319\n",
      "R2 score corespond to random state 47 is 0.6532488695191139\n",
      "R2 score corespond to random state 47 is 0.512053342107139\n",
      "R2 score corespond to random state 47 is 0.454004847752957\n",
      "R2 score corespond to random state 48 is 0.6720160789141969\n",
      "R2 score corespond to random state 48 is 0.5222778535885004\n",
      "R2 score corespond to random state 48 is 0.43801476766875636\n",
      "R2 score corespond to random state 49 is 0.671178343527859\n",
      "R2 score corespond to random state 49 is 0.5016234823483494\n",
      "R2 score corespond to random state 49 is 0.41721294584383295\n",
      "R2 score corespond to random state 50 is 0.6537718490675188\n",
      "R2 score corespond to random state 50 is 0.5167828050731385\n",
      "R2 score corespond to random state 50 is 0.44893556585618544\n",
      "R2 score corespond to random state 51 is 0.634492159157479\n",
      "R2 score corespond to random state 51 is 0.49118918702963854\n",
      "R2 score corespond to random state 51 is 0.4184479129585723\n",
      "R2 score corespond to random state 52 is 0.6602599988286617\n",
      "R2 score corespond to random state 52 is 0.5151528706804496\n",
      "R2 score corespond to random state 52 is 0.46023527933095865\n",
      "R2 score corespond to random state 53 is 0.6625620027798014\n",
      "R2 score corespond to random state 53 is 0.49386376698662005\n",
      "R2 score corespond to random state 53 is 0.41946430411099656\n",
      "R2 score corespond to random state 54 is 0.6745526037722397\n",
      "R2 score corespond to random state 54 is 0.5051552558407735\n",
      "R2 score corespond to random state 54 is 0.42692910199717904\n",
      "R2 score corespond to random state 55 is 0.6785623359753907\n",
      "R2 score corespond to random state 55 is 0.5057218598884874\n",
      "R2 score corespond to random state 55 is 0.418337553416261\n",
      "R2 score corespond to random state 56 is 0.6475930807579781\n",
      "R2 score corespond to random state 56 is 0.48733405126605966\n",
      "R2 score corespond to random state 56 is 0.46865612477879237\n",
      "R2 score corespond to random state 57 is 0.6880036920522585\n",
      "R2 score corespond to random state 57 is 0.5260183788445585\n",
      "R2 score corespond to random state 57 is 0.47897608486616794\n",
      "R2 score corespond to random state 58 is 0.6780707409711044\n",
      "R2 score corespond to random state 58 is 0.5022496979652358\n",
      "R2 score corespond to random state 58 is 0.4569707981871878\n",
      "R2 score corespond to random state 59 is 0.6817353874092611\n",
      "R2 score corespond to random state 59 is 0.49825117820974885\n",
      "R2 score corespond to random state 59 is 0.44404037334582935\n",
      "R2 score corespond to random state 60 is 0.6834608616046733\n",
      "R2 score corespond to random state 60 is 0.5092864449332769\n",
      "R2 score corespond to random state 60 is 0.470481966963776\n",
      "R2 score corespond to random state 61 is 0.681405785648482\n",
      "R2 score corespond to random state 61 is 0.5017560090287381\n",
      "R2 score corespond to random state 61 is 0.4407592225925143\n",
      "R2 score corespond to random state 62 is 0.6533009184991684\n",
      "R2 score corespond to random state 62 is 0.5041685954759085\n",
      "R2 score corespond to random state 62 is 0.45805137470117574\n",
      "R2 score corespond to random state 63 is 0.633286688047622\n",
      "R2 score corespond to random state 63 is 0.48882547550926525\n",
      "R2 score corespond to random state 63 is 0.44126082724393845\n",
      "R2 score corespond to random state 64 is 0.6708664577738852\n",
      "R2 score corespond to random state 64 is 0.5106533814933629\n",
      "R2 score corespond to random state 64 is 0.48013552051309205\n",
      "R2 score corespond to random state 65 is 0.680912334299814\n",
      "R2 score corespond to random state 65 is 0.504805714415473\n",
      "R2 score corespond to random state 65 is 0.43829486831379827\n",
      "R2 score corespond to random state 66 is 0.6591226319296237\n",
      "R2 score corespond to random state 66 is 0.5092564027349555\n",
      "R2 score corespond to random state 66 is 0.4478883975110739\n",
      "R2 score corespond to random state 67 is 0.6830026769827453\n",
      "R2 score corespond to random state 67 is 0.4867027568724275\n",
      "R2 score corespond to random state 67 is 0.4430627123849765\n",
      "R2 score corespond to random state 68 is 0.6705904976008865\n",
      "R2 score corespond to random state 68 is 0.49541202293798603\n",
      "R2 score corespond to random state 68 is 0.4537895338650886\n",
      "R2 score corespond to random state 69 is 0.6585201971586496\n",
      "R2 score corespond to random state 69 is 0.49172978433867687\n",
      "R2 score corespond to random state 69 is 0.4781190219084952\n",
      "R2 score corespond to random state 70 is 0.6862745397803655\n",
      "R2 score corespond to random state 70 is 0.49636470698161794\n",
      "R2 score corespond to random state 70 is 0.4700848627697306\n",
      "R2 score corespond to random state 71 is 0.6772609690186181\n",
      "R2 score corespond to random state 71 is 0.5054799309626324\n",
      "R2 score corespond to random state 71 is 0.4930653236183572\n",
      "R2 score corespond to random state 72 is 0.6822750517172834\n",
      "R2 score corespond to random state 72 is 0.5135592578522609\n",
      "R2 score corespond to random state 72 is 0.47792875881577834\n",
      "R2 score corespond to random state 73 is 0.662537731434749\n",
      "R2 score corespond to random state 73 is 0.5002786510815171\n",
      "R2 score corespond to random state 73 is 0.45964143468583163\n",
      "R2 score corespond to random state 74 is 0.6781249550937349\n",
      "R2 score corespond to random state 74 is 0.502591157338923\n",
      "R2 score corespond to random state 74 is 0.4348509429496221\n",
      "R2 score corespond to random state 75 is 0.6643212221153185\n",
      "R2 score corespond to random state 75 is 0.4960667816210248\n",
      "R2 score corespond to random state 75 is 0.46249795662148674\n",
      "R2 score corespond to random state 76 is 0.6377866064309105\n",
      "R2 score corespond to random state 76 is 0.4983501402622048\n",
      "R2 score corespond to random state 76 is 0.45391678326725793\n",
      "R2 score corespond to random state 77 is 0.6492230317146142\n",
      "R2 score corespond to random state 77 is 0.5133611184051847\n",
      "R2 score corespond to random state 77 is 0.41671015478997375\n",
      "R2 score corespond to random state 78 is 0.7107037677282178\n",
      "R2 score corespond to random state 78 is 0.5065548610691284\n",
      "R2 score corespond to random state 78 is 0.4313892468102435\n",
      "R2 score corespond to random state 79 is 0.649483307395842\n",
      "R2 score corespond to random state 79 is 0.5136305726551638\n",
      "R2 score corespond to random state 79 is 0.4687375318935538\n",
      "R2 score corespond to random state 80 is 0.6542701724229161\n",
      "R2 score corespond to random state 80 is 0.4910980961869774\n",
      "R2 score corespond to random state 80 is 0.4404679702133294\n",
      "R2 score corespond to random state 81 is 0.6916108161616001\n",
      "R2 score corespond to random state 81 is 0.5147697693469147\n",
      "R2 score corespond to random state 81 is 0.4455814662610751\n",
      "R2 score corespond to random state 82 is 0.6575380237542519\n",
      "R2 score corespond to random state 82 is 0.5071220297875603\n",
      "R2 score corespond to random state 82 is 0.41631459727966036\n",
      "R2 score corespond to random state 83 is 0.6868140793990056\n",
      "R2 score corespond to random state 83 is 0.5127960630384361\n",
      "R2 score corespond to random state 83 is 0.4511986129561901\n",
      "R2 score corespond to random state 84 is 0.653292460283968\n",
      "R2 score corespond to random state 84 is 0.5156987793114384\n",
      "R2 score corespond to random state 84 is 0.42932308450773893\n",
      "R2 score corespond to random state 85 is 0.6641530291906339\n",
      "R2 score corespond to random state 85 is 0.4987666736054216\n",
      "R2 score corespond to random state 85 is 0.46580247370325656\n",
      "R2 score corespond to random state 86 is 0.6653950596104237\n",
      "R2 score corespond to random state 86 is 0.4980107790458562\n",
      "R2 score corespond to random state 86 is 0.46347597594766576\n",
      "R2 score corespond to random state 87 is 0.648881083839762\n",
      "R2 score corespond to random state 87 is 0.4926153160234499\n",
      "R2 score corespond to random state 87 is 0.42137738164775473\n",
      "R2 score corespond to random state 88 is 0.6801735779802536\n",
      "R2 score corespond to random state 88 is 0.5027974826213564\n",
      "R2 score corespond to random state 88 is 0.42940943573441914\n",
      "R2 score corespond to random state 89 is 0.6888984864592753\n",
      "R2 score corespond to random state 89 is 0.49796769752888526\n",
      "R2 score corespond to random state 89 is 0.45502996876263213\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "R2 score corespond to random state 78 is 0.7107037677282178 and the model is DecisionTreeRegressor()\n"
     ]
    }
   ],
   "source": [
    "model = [DecisionTreeRegressor(), KNeighborsRegressor() , AdaBoostRegressor()]\n",
    "max_r2_score = 0\n",
    "for r_state in range(40,90):\n",
    "    train_x, test_x ,train_y , test_y = train_test_split(x,y,random_state = r_state , test_size = 0.33)\n",
    "    for i in model:\n",
    "        i.fit(train_x,train_y)\n",
    "        pre = i.predict(test_x)\n",
    "        r2_sc = r2_score(test_y,pre)\n",
    "        print(\"R2 score corespond to random state\", r_state,\"is\", r2_sc)\n",
    "        if r2_sc>max_r2_score:\n",
    "            max_r2_score=r2_sc\n",
    "            final_state = r_state\n",
    "            final_model = i\n",
    "print()\n",
    "print()\n",
    "print()\n",
    "print()\n",
    "print(\"R2 score corespond to random state\", final_state,\"is\", max_r2_score , \"and the model is\",final_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "d4e18855-7c44-43df-a8a1-30df5752b50a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score:  65.31123579051611\n"
     ]
    }
   ],
   "source": [
    "train_x, test_x ,train_y , test_y = train_test_split(x,y,random_state = 80 , test_size = 0.33)\n",
    "regressor = DecisionTreeRegressor(random_state=0)\n",
    "cross_val_score(regressor, train_x, train_y, cv=10)\n",
    "regressor.fit(train_x,train_y)\n",
    "pred = regressor.predict(test_x)\n",
    "r2_sc = r2_score(test_y,pred)\n",
    "print(\"R2 Score: \",r2_sc*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "5ddd9d51-97ec-4f4b-8f9b-0477e9e90d44",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error:  0.1551810344827586\n",
      "Mean squared Error:  0.05726598275862069\n",
      "Root Mean Absolute Error:  0.39393024062993515\n"
     ]
    }
   ],
   "source": [
    "print('Mean Absolute Error: ',mean_absolute_error(test_y,pred))\n",
    "print('Mean squared Error: ',mean_squared_error(test_y,pred))\n",
    "print('Root Mean Absolute Error: ',np.sqrt(mean_absolute_error(test_y,pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "07b365f2-8fcd-4895-9b6d-6a1a7d011ca7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Predicted Avocado Prices')"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=test_y , y=pred ,  s=100 )\n",
    "plt.xlabel('Tested Avocado Prices')\n",
    "plt.ylabel('Predicted Avocado Prices')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
